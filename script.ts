class CustomImage {
  width: number;
  height: number;
  pixels: number[];
  probabilityList: Record<string, number> = {
    "1": 0,
    "2": 0,
    "3": 0,
    "4": 0,
    "5": 0,
    "6": 0,
    "7": 0,
    "8": 0,
    "9": 0,
  };

  constructor(w: number, h: number, data: number[]) {
    this.width = w;
    this.height = h;
    this.pixels = data.slice();

    this.#printGrid(this.pixels, this.width, this.height);
  }

  #printGrid(pixels: number[], width: number, height: number) {
    for (let i = 0; i < height; i++) {
      const row = pixels.slice(i * width, (i + 1) * width);
      const formattedRow = row
        .map((val) => val.toString().padStart(3, " "))
        .join(" ");
      console.log(formattedRow);
    }
  }

  #sliceQuarter(quarter: number): number[] {
    let quarterList: number[] = [];
    const startIndex: number =
      quarter === 1 || quarter === 2 ? 0 : Math.floor(this.height / 2);

    for (let i = startIndex; i < this.height; i++) {
      if (quarter === 1 || quarter === 3) {
        quarterList = [
          ...quarterList,
          ...this.pixels.slice(
            i * this.width,
            i * this.width + Math.floor(this.width / 2)
          ),
        ];
      } else if (quarter === 2 || quarter === 4) {
        quarterList = [
          ...quarterList,
          ...this.pixels.slice(
            i * this.width + Math.ceil(this.width / 2),
            (i + 1) * this.width
          ),
        ];
      } else {
        return [0];
      }
    }

    return quarterList;
  }

  #recognizePatters(pattern: number[], quarter: number): number {
    let brightPixels: number = 0;
    let darkPixels: number = 0;

    for (const pixel of pattern) {
      if (pixel < 122) {
        brightPixels++;
      } else {
        darkPixels++;
      }
    }

    return brightPixels / darkPixels;
  }

  #predictNumber(): number | undefined {
    const ratioList: number[] = [];

    for (let i = 1; i < 5; i++) {
      const quarter = this.#sliceQuarter(i);
      console.log("Quarter: ", i);
      ratioList.push(this.#recognizePatters(quarter, i));
    }

    if (ratioList.every((r) => r === ratioList[0])) {
      return 0;
    }
    // else if {

    // }
  }

  ocr(): number {
    return 0;
  }
}

const OCR = new CustomImage(
  13,
  18,
  [
    0xff, 0xff, 0xff, 0xc0, 0xad, 0xad, 0xad, 0xad, 0xaf, 0xe8, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xda, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0x28, 0x2e, 0xe, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0xdc, 0xff, 0x50, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0xdc, 0xff, 0x50, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0xdc, 0xff, 0x50, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0xdc, 0xff, 0x50, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xd4, 0x0, 0x0, 0xdc, 0xff, 0x50, 0x0, 0x37, 0xff, 0xff,
    0xff, 0xff, 0xd3, 0x42, 0x0, 0x0, 0x3a, 0x44, 0x12, 0x0, 0xe, 0x81, 0xf3,
    0xff, 0xd9, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4f, 0xff,
    0xb0, 0x0, 0xb, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x35, 0x0, 0xa, 0xf1,
    0xad, 0x0, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x0, 0x0, 0xe8,
    0xad, 0x0, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x0, 0x0, 0xe8,
    0xad, 0x0, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x0, 0x0, 0xe8,
    0xad, 0x0, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x0, 0x0, 0xe8,
    0xad, 0x0, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x0, 0x0, 0xe8,
    0xb2, 0x0, 0x8, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x28, 0x0, 0xe, 0xf5,
    0xe8, 0x1e, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x6b,
    0xff,
  ]
);

OCR.ocr();
